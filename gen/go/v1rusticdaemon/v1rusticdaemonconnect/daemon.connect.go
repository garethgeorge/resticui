// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1rusticdaemon/daemon.proto

package v1rusticdaemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1rusticdaemon "github.com/garethgeorge/backrest/gen/go/v1rusticdaemon"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RusticDaemonName is the fully-qualified name of the RusticDaemon service.
	RusticDaemonName = "v1rusticdaemon.RusticDaemon"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RusticDaemonValidateRepoOptsProcedure is the fully-qualified name of the RusticDaemon's
	// ValidateRepoOpts RPC.
	RusticDaemonValidateRepoOptsProcedure = "/v1rusticdaemon.RusticDaemon/ValidateRepoOpts"
	// RusticDaemonExistsProcedure is the fully-qualified name of the RusticDaemon's Exists RPC.
	RusticDaemonExistsProcedure = "/v1rusticdaemon.RusticDaemon/Exists"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	rusticDaemonServiceDescriptor                = v1rusticdaemon.File_v1rusticdaemon_daemon_proto.Services().ByName("RusticDaemon")
	rusticDaemonValidateRepoOptsMethodDescriptor = rusticDaemonServiceDescriptor.Methods().ByName("ValidateRepoOpts")
	rusticDaemonExistsMethodDescriptor           = rusticDaemonServiceDescriptor.Methods().ByName("Exists")
)

// RusticDaemonClient is a client for the v1rusticdaemon.RusticDaemon service.
type RusticDaemonClient interface {
	ValidateRepoOpts(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[v1rusticdaemon.ValidateResponse], error)
	Exists(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[emptypb.Empty], error)
}

// NewRusticDaemonClient constructs a client for the v1rusticdaemon.RusticDaemon service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRusticDaemonClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RusticDaemonClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rusticDaemonClient{
		validateRepoOpts: connect.NewClient[v1rusticdaemon.RepoOpts, v1rusticdaemon.ValidateResponse](
			httpClient,
			baseURL+RusticDaemonValidateRepoOptsProcedure,
			connect.WithSchema(rusticDaemonValidateRepoOptsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exists: connect.NewClient[v1rusticdaemon.RepoOpts, emptypb.Empty](
			httpClient,
			baseURL+RusticDaemonExistsProcedure,
			connect.WithSchema(rusticDaemonExistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// rusticDaemonClient implements RusticDaemonClient.
type rusticDaemonClient struct {
	validateRepoOpts *connect.Client[v1rusticdaemon.RepoOpts, v1rusticdaemon.ValidateResponse]
	exists           *connect.Client[v1rusticdaemon.RepoOpts, emptypb.Empty]
}

// ValidateRepoOpts calls v1rusticdaemon.RusticDaemon.ValidateRepoOpts.
func (c *rusticDaemonClient) ValidateRepoOpts(ctx context.Context, req *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[v1rusticdaemon.ValidateResponse], error) {
	return c.validateRepoOpts.CallUnary(ctx, req)
}

// Exists calls v1rusticdaemon.RusticDaemon.Exists.
func (c *rusticDaemonClient) Exists(ctx context.Context, req *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[emptypb.Empty], error) {
	return c.exists.CallUnary(ctx, req)
}

// RusticDaemonHandler is an implementation of the v1rusticdaemon.RusticDaemon service.
type RusticDaemonHandler interface {
	ValidateRepoOpts(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[v1rusticdaemon.ValidateResponse], error)
	Exists(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[emptypb.Empty], error)
}

// NewRusticDaemonHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRusticDaemonHandler(svc RusticDaemonHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rusticDaemonValidateRepoOptsHandler := connect.NewUnaryHandler(
		RusticDaemonValidateRepoOptsProcedure,
		svc.ValidateRepoOpts,
		connect.WithSchema(rusticDaemonValidateRepoOptsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rusticDaemonExistsHandler := connect.NewUnaryHandler(
		RusticDaemonExistsProcedure,
		svc.Exists,
		connect.WithSchema(rusticDaemonExistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1rusticdaemon.RusticDaemon/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RusticDaemonValidateRepoOptsProcedure:
			rusticDaemonValidateRepoOptsHandler.ServeHTTP(w, r)
		case RusticDaemonExistsProcedure:
			rusticDaemonExistsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRusticDaemonHandler returns CodeUnimplemented from all methods.
type UnimplementedRusticDaemonHandler struct{}

func (UnimplementedRusticDaemonHandler) ValidateRepoOpts(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[v1rusticdaemon.ValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1rusticdaemon.RusticDaemon.ValidateRepoOpts is not implemented"))
}

func (UnimplementedRusticDaemonHandler) Exists(context.Context, *connect.Request[v1rusticdaemon.RepoOpts]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1rusticdaemon.RusticDaemon.Exists is not implemented"))
}
