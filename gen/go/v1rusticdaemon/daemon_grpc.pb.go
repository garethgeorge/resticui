// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1rusticdaemon/daemon.proto

package v1rusticdaemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RusticDaemon_ValidateRepoOpts_FullMethodName = "/v1rusticdaemon.RusticDaemon/ValidateRepoOpts"
	RusticDaemon_Exists_FullMethodName           = "/v1rusticdaemon.RusticDaemon/Exists"
)

// RusticDaemonClient is the client API for RusticDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RusticDaemonClient interface {
	ValidateRepoOpts(ctx context.Context, in *RepoOpts, opts ...grpc.CallOption) (*ValidateResponse, error)
	Exists(ctx context.Context, in *RepoOpts, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rusticDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewRusticDaemonClient(cc grpc.ClientConnInterface) RusticDaemonClient {
	return &rusticDaemonClient{cc}
}

func (c *rusticDaemonClient) ValidateRepoOpts(ctx context.Context, in *RepoOpts, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, RusticDaemon_ValidateRepoOpts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rusticDaemonClient) Exists(ctx context.Context, in *RepoOpts, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RusticDaemon_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RusticDaemonServer is the server API for RusticDaemon service.
// All implementations must embed UnimplementedRusticDaemonServer
// for forward compatibility
type RusticDaemonServer interface {
	ValidateRepoOpts(context.Context, *RepoOpts) (*ValidateResponse, error)
	Exists(context.Context, *RepoOpts) (*emptypb.Empty, error)
	mustEmbedUnimplementedRusticDaemonServer()
}

// UnimplementedRusticDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedRusticDaemonServer struct {
}

func (UnimplementedRusticDaemonServer) ValidateRepoOpts(context.Context, *RepoOpts) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRepoOpts not implemented")
}
func (UnimplementedRusticDaemonServer) Exists(context.Context, *RepoOpts) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedRusticDaemonServer) mustEmbedUnimplementedRusticDaemonServer() {}

// UnsafeRusticDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RusticDaemonServer will
// result in compilation errors.
type UnsafeRusticDaemonServer interface {
	mustEmbedUnimplementedRusticDaemonServer()
}

func RegisterRusticDaemonServer(s grpc.ServiceRegistrar, srv RusticDaemonServer) {
	s.RegisterService(&RusticDaemon_ServiceDesc, srv)
}

func _RusticDaemon_ValidateRepoOpts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RusticDaemonServer).ValidateRepoOpts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RusticDaemon_ValidateRepoOpts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RusticDaemonServer).ValidateRepoOpts(ctx, req.(*RepoOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RusticDaemon_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RusticDaemonServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RusticDaemon_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RusticDaemonServer).Exists(ctx, req.(*RepoOpts))
	}
	return interceptor(ctx, in, info, handler)
}

// RusticDaemon_ServiceDesc is the grpc.ServiceDesc for RusticDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RusticDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1rusticdaemon.RusticDaemon",
	HandlerType: (*RusticDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateRepoOpts",
			Handler:    _RusticDaemon_ValidateRepoOpts_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _RusticDaemon_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1rusticdaemon/daemon.proto",
}
