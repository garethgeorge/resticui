// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file v1rusticdaemon/daemon.proto (package v1rusticdaemon, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message v1rusticdaemon.VersionResponse
 */
export class VersionResponse extends Message<VersionResponse> {
  /**
   * @generated from field: int64 daemon_version = 1;
   */
  daemonVersion = protoInt64.zero;

  constructor(data?: PartialMessage<VersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.VersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "daemon_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionResponse {
    return new VersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionResponse {
    return new VersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionResponse {
    return new VersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VersionResponse | PlainMessage<VersionResponse> | undefined, b: VersionResponse | PlainMessage<VersionResponse> | undefined): boolean {
    return proto3.util.equals(VersionResponse, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.ValidateResponse
 */
export class ValidateResponse extends Message<ValidateResponse> {
  /**
   * @generated from field: repeated string errors = 1;
   */
  errors: string[] = [];

  /**
   * @generated from field: repeated string warnings = 2;
   */
  warnings: string[] = [];

  constructor(data?: PartialMessage<ValidateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.ValidateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "warnings", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateResponse {
    return new ValidateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateResponse {
    return new ValidateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateResponse {
    return new ValidateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateResponse | PlainMessage<ValidateResponse> | undefined, b: ValidateResponse | PlainMessage<ValidateResponse> | undefined): boolean {
    return proto3.util.equals(ValidateResponse, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.CommandResponse
 */
export class CommandResponse extends Message<CommandResponse> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  /**
   * @generated from field: string logs = 3;
   */
  logs = "";

  /**
   * @generated from field: double progress = 4;
   */
  progress = 0;

  constructor(data?: PartialMessage<CommandResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.CommandResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "progress", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandResponse {
    return new CommandResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandResponse {
    return new CommandResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandResponse {
    return new CommandResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommandResponse | PlainMessage<CommandResponse> | undefined, b: CommandResponse | PlainMessage<CommandResponse> | undefined): boolean {
    return proto3.util.equals(CommandResponse, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.RepoOpts
 */
export class RepoOpts extends Message<RepoOpts> {
  /**
   * @generated from field: string backend_opts_toml = 1 [json_name = "backend_opts_toml"];
   */
  backendOptsToml = "";

  /**
   * @generated from field: string repo_opts_toml = 2 [json_name = "repo_opts_toml"];
   */
  repoOptsToml = "";

  constructor(data?: PartialMessage<RepoOpts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.RepoOpts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "backend_opts_toml", jsonName: "backend_opts_toml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo_opts_toml", jsonName: "repo_opts_toml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoOpts {
    return new RepoOpts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoOpts {
    return new RepoOpts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoOpts {
    return new RepoOpts().fromJsonString(jsonString, options);
  }

  static equals(a: RepoOpts | PlainMessage<RepoOpts> | undefined, b: RepoOpts | PlainMessage<RepoOpts> | undefined): boolean {
    return proto3.util.equals(RepoOpts, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.InitRequest
 */
export class InitRequest extends Message<InitRequest> {
  /**
   * @generated from field: v1rusticdaemon.RepoOpts repo_opts = 1 [json_name = "repo_opts"];
   */
  repoOpts?: RepoOpts;

  constructor(data?: PartialMessage<InitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.InitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_opts", jsonName: "repo_opts", kind: "message", T: RepoOpts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitRequest {
    return new InitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitRequest | PlainMessage<InitRequest> | undefined, b: InitRequest | PlainMessage<InitRequest> | undefined): boolean {
    return proto3.util.equals(InitRequest, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.BackupRequest
 */
export class BackupRequest extends Message<BackupRequest> {
  /**
   * @generated from field: v1rusticdaemon.RepoOpts repo_opts = 1 [json_name = "repo_opts"];
   */
  repoOpts?: RepoOpts;

  constructor(data?: PartialMessage<BackupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.BackupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_opts", jsonName: "repo_opts", kind: "message", T: RepoOpts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackupRequest {
    return new BackupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackupRequest {
    return new BackupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackupRequest {
    return new BackupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BackupRequest | PlainMessage<BackupRequest> | undefined, b: BackupRequest | PlainMessage<BackupRequest> | undefined): boolean {
    return proto3.util.equals(BackupRequest, a, b);
  }
}

/**
 * @generated from message v1rusticdaemon.BackupResponse
 */
export class BackupResponse extends Message<BackupResponse> {
  /**
   * @generated from field: v1rusticdaemon.CommandResponse resp = 1;
   */
  resp?: CommandResponse;

  /**
   * populated at the end ... todo: other values
   *
   * @generated from field: string snapshot_id = 2;
   */
  snapshotId = "";

  constructor(data?: PartialMessage<BackupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1rusticdaemon.BackupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resp", kind: "message", T: CommandResponse },
    { no: 2, name: "snapshot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackupResponse {
    return new BackupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackupResponse {
    return new BackupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackupResponse {
    return new BackupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BackupResponse | PlainMessage<BackupResponse> | undefined, b: BackupResponse | PlainMessage<BackupResponse> | undefined): boolean {
    return proto3.util.equals(BackupResponse, a, b);
  }
}

